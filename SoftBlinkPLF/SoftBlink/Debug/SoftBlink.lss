
SoftBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f7  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000711  00000000  00000000  00000b77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000365  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000015f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041c  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000028f  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001cdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  78:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z13perceivedFunci>:
	}
}

int perceivedFunc(int inn)
{
	return(inn*inn/100);
  80:	9c 01       	movw	r18, r24
  82:	22 9f       	mul	r18, r18
  84:	c0 01       	movw	r24, r0
  86:	23 9f       	mul	r18, r19
  88:	90 0d       	add	r25, r0
  8a:	90 0d       	add	r25, r0
  8c:	11 24       	eor	r1, r1
  8e:	64 e6       	ldi	r22, 0x64	; 100
  90:	70 e0       	ldi	r23, 0x00	; 0
  92:	0e 94 9e 00 	call	0x13c	; 0x13c <__divmodhi4>
  96:	cb 01       	movw	r24, r22
}
  98:	08 95       	ret

0000009a <main>:
{
	
	int onTime = 0;
	int offTime = 100;
	
	DDRB = (1 << PB1);
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	84 b9       	out	0x04, r24	; 4
	
	while (1) 
    {		
		for (int i = 0; i <=100; i++) // fra 0 til 100%
  9e:	c0 e0       	ldi	r28, 0x00	; 0
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	c5 36       	cpi	r28, 0x65	; 101
  a4:	d1 05       	cpc	r29, r1
  a6:	1c f5       	brge	.+70     	; 0xee <main+0x54>
		{
			offTime = 100;
			onTime = 0;
			int set = perceivedFunc(i);
  a8:	ce 01       	movw	r24, r28
  aa:	0e 94 40 00 	call	0x80	; 0x80 <_Z13perceivedFunci>
			
			PORTB |= (1 << PB1);
  ae:	25 b1       	in	r18, 0x05	; 5
  b0:	22 60       	ori	r18, 0x02	; 2
  b2:	25 b9       	out	0x05, r18	; 5
	while (1) 
    {		
		for (int i = 0; i <=100; i++) // fra 0 til 100%
		{
			offTime = 100;
			onTime = 0;
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
			int set = perceivedFunc(i);
			
			PORTB |= (1 << PB1);
			
			while (onTime<set) //onTime øker så lenge den er mindre enn i
  b8:	28 17       	cp	r18, r24
  ba:	39 07       	cpc	r19, r25
  bc:	3c f4       	brge	.+14     	; 0xcc <main+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	41 e2       	ldi	r20, 0x21	; 33
  c0:	4a 95       	dec	r20
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x26>
  c4:	00 00       	nop
			{
				_delay_ms(0.1);
				onTime++;
  c6:	2f 5f       	subi	r18, 0xFF	; 255
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
			onTime = 0;
			int set = perceivedFunc(i);
			
			PORTB |= (1 << PB1);
			
			while (onTime<set) //onTime øker så lenge den er mindre enn i
  ca:	f6 cf       	rjmp	.-20     	; 0xb8 <main+0x1e>
			{
				_delay_ms(0.1);
				onTime++;
			}
			
			PORTB &= ~(1 << PB1);
  cc:	25 b1       	in	r18, 0x05	; 5
  ce:	2d 7f       	andi	r18, 0xFD	; 253
  d0:	25 b9       	out	0x05, r18	; 5
	
	while (1) 
    {		
		for (int i = 0; i <=100; i++) // fra 0 til 100%
		{
			offTime = 100;
  d2:	24 e6       	ldi	r18, 0x64	; 100
  d4:	30 e0       	ldi	r19, 0x00	; 0
				onTime++;
			}
			
			PORTB &= ~(1 << PB1);
			
			while(offTime>set)
  d6:	82 17       	cp	r24, r18
  d8:	93 07       	cpc	r25, r19
  da:	3c f4       	brge	.+14     	; 0xea <main+0x50>
  dc:	41 e2       	ldi	r20, 0x21	; 33
  de:	4a 95       	dec	r20
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x44>
  e2:	00 00       	nop
			{
				_delay_ms(0.1);
				offTime--;
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	31 09       	sbc	r19, r1
				onTime++;
			}
			
			PORTB &= ~(1 << PB1);
			
			while(offTime>set)
  e8:	f6 cf       	rjmp	.-20     	; 0xd6 <main+0x3c>
	
	DDRB = (1 << PB1);
	
	while (1) 
    {		
		for (int i = 0; i <=100; i++) // fra 0 til 100%
  ea:	21 96       	adiw	r28, 0x01	; 1
  ec:	da cf       	rjmp	.-76     	; 0xa2 <main+0x8>
  ee:	c4 e6       	ldi	r28, 0x64	; 100
  f0:	d0 e0       	ldi	r29, 0x00	; 0
			{
				_delay_ms(0.1);
				offTime--;
			}
		}
		for (int i = 100; i >= 0; i--) // fra 100 til 0%
  f2:	dd 23       	and	r29, r29
  f4:	a4 f2       	brlt	.-88     	; 0x9e <main+0x4>
		{
			offTime = 100;
			onTime = 0;
			int set = perceivedFunc(i);
  f6:	ce 01       	movw	r24, r28
  f8:	0e 94 40 00 	call	0x80	; 0x80 <_Z13perceivedFunci>
							
			PORTB |= (1 << PB1);
  fc:	25 b1       	in	r18, 0x05	; 5
  fe:	22 60       	ori	r18, 0x02	; 2
 100:	25 b9       	out	0x05, r18	; 5
			}
		}
		for (int i = 100; i >= 0; i--) // fra 100 til 0%
		{
			offTime = 100;
			onTime = 0;
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
			int set = perceivedFunc(i);
							
			PORTB |= (1 << PB1);
			
			while (onTime<set) //
 106:	28 17       	cp	r18, r24
 108:	39 07       	cpc	r19, r25
 10a:	3c f4       	brge	.+14     	; 0x11a <main+0x80>
 10c:	41 e2       	ldi	r20, 0x21	; 33
 10e:	4a 95       	dec	r20
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x74>
 112:	00 00       	nop
			{
				_delay_ms(0.1);
				onTime++;
 114:	2f 5f       	subi	r18, 0xFF	; 255
 116:	3f 4f       	sbci	r19, 0xFF	; 255
			onTime = 0;
			int set = perceivedFunc(i);
							
			PORTB |= (1 << PB1);
			
			while (onTime<set) //
 118:	f6 cf       	rjmp	.-20     	; 0x106 <main+0x6c>
			{
				_delay_ms(0.1);
				onTime++;
			}
			
				PORTB &= ~(1 << PB1);
 11a:	25 b1       	in	r18, 0x05	; 5
 11c:	2d 7f       	andi	r18, 0xFD	; 253
 11e:	25 b9       	out	0x05, r18	; 5
				offTime--;
			}
		}
		for (int i = 100; i >= 0; i--) // fra 100 til 0%
		{
			offTime = 100;
 120:	24 e6       	ldi	r18, 0x64	; 100
 122:	30 e0       	ldi	r19, 0x00	; 0
				onTime++;
			}
			
				PORTB &= ~(1 << PB1);
			
			while(offTime>set)
 124:	82 17       	cp	r24, r18
 126:	93 07       	cpc	r25, r19
 128:	3c f4       	brge	.+14     	; 0x138 <main+0x9e>
 12a:	41 e2       	ldi	r20, 0x21	; 33
 12c:	4a 95       	dec	r20
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0x92>
 130:	00 00       	nop
			{
				_delay_ms(0.1);
				offTime--;
 132:	21 50       	subi	r18, 0x01	; 1
 134:	31 09       	sbc	r19, r1
				onTime++;
			}
			
				PORTB &= ~(1 << PB1);
			
			while(offTime>set)
 136:	f6 cf       	rjmp	.-20     	; 0x124 <main+0x8a>
			{
				_delay_ms(0.1);
				offTime--;
			}
		}
		for (int i = 100; i >= 0; i--) // fra 100 til 0%
 138:	21 97       	sbiw	r28, 0x01	; 1
 13a:	db cf       	rjmp	.-74     	; 0xf2 <main+0x58>

0000013c <__divmodhi4>:
 13c:	97 fb       	bst	r25, 7
 13e:	07 2e       	mov	r0, r23
 140:	16 f4       	brtc	.+4      	; 0x146 <__divmodhi4+0xa>
 142:	00 94       	com	r0
 144:	07 d0       	rcall	.+14     	; 0x154 <__divmodhi4_neg1>
 146:	77 fd       	sbrc	r23, 7
 148:	09 d0       	rcall	.+18     	; 0x15c <__divmodhi4_neg2>
 14a:	0e 94 b2 00 	call	0x164	; 0x164 <__udivmodhi4>
 14e:	07 fc       	sbrc	r0, 7
 150:	05 d0       	rcall	.+10     	; 0x15c <__divmodhi4_neg2>
 152:	3e f4       	brtc	.+14     	; 0x162 <__divmodhi4_exit>

00000154 <__divmodhi4_neg1>:
 154:	90 95       	com	r25
 156:	81 95       	neg	r24
 158:	9f 4f       	sbci	r25, 0xFF	; 255
 15a:	08 95       	ret

0000015c <__divmodhi4_neg2>:
 15c:	70 95       	com	r23
 15e:	61 95       	neg	r22
 160:	7f 4f       	sbci	r23, 0xFF	; 255

00000162 <__divmodhi4_exit>:
 162:	08 95       	ret

00000164 <__udivmodhi4>:
 164:	aa 1b       	sub	r26, r26
 166:	bb 1b       	sub	r27, r27
 168:	51 e1       	ldi	r21, 0x11	; 17
 16a:	07 c0       	rjmp	.+14     	; 0x17a <__udivmodhi4_ep>

0000016c <__udivmodhi4_loop>:
 16c:	aa 1f       	adc	r26, r26
 16e:	bb 1f       	adc	r27, r27
 170:	a6 17       	cp	r26, r22
 172:	b7 07       	cpc	r27, r23
 174:	10 f0       	brcs	.+4      	; 0x17a <__udivmodhi4_ep>
 176:	a6 1b       	sub	r26, r22
 178:	b7 0b       	sbc	r27, r23

0000017a <__udivmodhi4_ep>:
 17a:	88 1f       	adc	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	5a 95       	dec	r21
 180:	a9 f7       	brne	.-22     	; 0x16c <__udivmodhi4_loop>
 182:	80 95       	com	r24
 184:	90 95       	com	r25
 186:	bc 01       	movw	r22, r24
 188:	cd 01       	movw	r24, r26
 18a:	08 95       	ret

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
