
ButtonInterrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007dc  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e6  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e1  00000000  00000000  000010b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001398  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044a  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d0  00000000  00000000  00001826  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000018f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  78:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z14init_ports_mcuv>:



void init_ports_mcu()
{
	DDRB=0xFFu; // Set all pins of the PORTB as output.
  80:	9f ef       	ldi	r25, 0xFF	; 255
  82:	94 b9       	out	0x04, r25	; 4
	DDRD &= ~(1<<PD0); // Makes first pin of PORTB as Input
  84:	8a b1       	in	r24, 0x0a	; 10
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	8a b9       	out	0x0a, r24	; 10
	PORTD = (1 << PD0);
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	8b b9       	out	0x0b, r24	; 11
	PORTB = 0xFF; // Set all pins of the PORTB as HIGH. Led is turn on,
  8e:	95 b9       	out	0x05, r25	; 5
  90:	08 95       	ret

00000092 <_Z12button_statev>:
}

bool button_state()
{
	/* the button is pressed when PD0 bit is clear */
	if (!(PIND & (1<<PD0)))
  92:	48 99       	sbic	0x09, 0	; 9
  94:	0a c0       	rjmp	.+20     	; 0xaa <_Z12button_statev+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	81 ee       	ldi	r24, 0xE1	; 225
  98:	94 e0       	ldi	r25, 0x04	; 4
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <_Z12button_statev+0x8>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <_Z12button_statev+0xe>
  a0:	00 00       	nop
	{
		 _delay_ms(DEBOUNCE_TIME);
		 if (!(PIND & (1<<PD0))) return true;
  a2:	48 99       	sbic	0x09, 0	; 9
  a4:	04 c0       	rjmp	.+8      	; 0xae <_Z12button_statev+0x1c>
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	08 95       	ret
	}
	 return false;
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	08 95       	ret
  ae:	80 e0       	ldi	r24, 0x00	; 0
 }
  b0:	08 95       	ret

000000b2 <main>:


int main(void)
{
	bool turnedOn = true;
	init_ports_mcu();
  b2:	0e 94 40 00 	call	0x80	; 0x80 <_Z14init_ports_mcuv>



int main(void)
{
	bool turnedOn = true;
  b6:	c1 e0       	ldi	r28, 0x01	; 1
	while(true){
	
		// Initialize I/O pins
		
	
		if (button_state()) // If the button is pressed, toggle the LED's state and delay for 300ms (#define LOCK_INPUT_TIME)
  b8:	0e 94 49 00 	call	0x92	; 0x92 <_Z12button_statev>
  bc:	88 23       	and	r24, r24
  be:	e1 f3       	breq	.-8      	; 0xb8 <main+0x6>
		{
			
			if(!turnedOn)
  c0:	c1 11       	cpse	r28, r1
  c2:	0e c0       	rjmp	.+28     	; 0xe0 <main+0x2e>
			{
				PORTB &= ~(1 << PB1);
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	8d 7f       	andi	r24, 0xFD	; 253
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	2f e9       	ldi	r18, 0x9F	; 159
  cc:	86 e8       	ldi	r24, 0x86	; 134
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x1e>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x28>
  da:	00 00       	nop
				turnedOn = true;
  dc:	c1 e0       	ldi	r28, 0x01	; 1
  de:	ec cf       	rjmp	.-40     	; 0xb8 <main+0x6>
				_delay_ms(500);
			}
			else if(turnedOn)
  e0:	cc 23       	and	r28, r28
  e2:	51 f3       	breq	.-44     	; 0xb8 <main+0x6>
			{
				PORTB |= (1<<PB1);
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	85 b9       	out	0x05, r24	; 5
  ea:	2f e9       	ldi	r18, 0x9F	; 159
  ec:	86 e8       	ldi	r24, 0x86	; 134
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x3e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x48>
  fa:	00 00       	nop
				turnedOn = false;
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	dc cf       	rjmp	.-72     	; 0xb8 <main+0x6>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
